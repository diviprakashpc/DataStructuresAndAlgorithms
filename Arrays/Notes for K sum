Notes for K Sum

1) Two Sum :
. Can be done with o(n) approach using Hashmaps. Unique pairs can also be found when elements are not distinct.
  When using this approach, Basically mark it visited so again we dont make same pair.
  
. Another approach is O(nlogn) approach.(Because we sort the array first).
 This one is great when used for solving 3sum , 4sum....ksum. It is also great when count unique pairs in two sum.
 It involves using two pointer approach. And finds pairs in O(n).
  
  
  Here I am going with the O(nlogn) approach. Because it can be used later.
  
 The reason it is best for ksums is because in ksums we sort the array in order to avoid duplicates. And hence when array is passed for two sum it is already sorted and hence no extra data structure is needed to avoid duplicate pairs and with single if condition (i!=0&&arr[i]==arr[i-1]) continue; we are able to avoid duplicate pairs and solve the question in o(n) using two pointers. 
  

The reason we sort the array for ksums is without that, checking the already visited elements would become complicated.



FOR GENERIC KSUM WE CAN USE RECURSION WITH BASE CASE AS K = 2.